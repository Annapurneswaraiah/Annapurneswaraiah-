import java.util.*;

public class BFS {
    public static void bfs(int start, List<List<Integer>> adj, int V) {
        boolean[] visited = new boolean[V]; // visited array
        Queue<Integer> queue = new LinkedList<>(); // queue

        visited[start] = true;   // mark start as visited
        queue.add(start);        // enqueue start

        while (!queue.isEmpty()) {
            int node = queue.poll();  // dequeue node
            System.out.print(node + " "); // process node

            // visit all unvisited neighbors
            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor); // enqueue neighbor
                }
            }
        }
    }

    public static void main(String[] args) {
        int V = 5;
        List<List<Integer>> adj = new ArrayList<>();

        // initialize adjacency list
        for (int i = 0; i < V; i++)
            adj.add(new ArrayList<>());

        // create edges
        adj.get(0).add(1);
        adj.get(0).add(2);
        adj.get(1).add(0);
        adj.get(2).add(0);
        adj.get(2).add(3);
        adj.get(2).add(4);
        adj.get(3).add(2);
        adj.get(4).add(2);

        System.out.println("BFS starting from node 0:");
        bfs(0, adj, V);
    }
}
